{"version":3,"sources":["components/shuffle.js","components/getRndInteger.js","components/generatepwd.js","components/Password.js","App.js","reportWebVitals.js","index.js"],"names":["shuffle","s","arr","split","sort","Math","random","join","getRndInteger","min","max","floor","generatepwd","length","lowercase","uppercase","number","specialcharacter","lowerCase","upperCase","digit","specialCharacter","result","choices","filtered","Object","entries","filter","filterChoice","fromEntries","filterChoiceKeys","keys","j","trace","i","rand","k","charAt","substring","toast","configure","Password","props","updateLength","e","setState","target","value","updateChoices","prevState","name","generator","state","password","copyToClipboard","preventDefault","navigator","clipboard","writeText","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","closeButton","passwordStrength","colorSig","icon","prevProps","iconComponents","color","size","this","passwordChecker","score","replace","className","onClick","id","type","onChange","htmlFor","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c0f06aae.chunk.js","sourcesContent":["function shuffle(s) {\r\n  let arr = s.split('');           \r\n  \r\n  arr.sort(function() {\r\n    return 0.5 - Math.random();\r\n  });  \r\n  s = arr.join('');                \r\n  return s;                        \r\n}\r\n\r\nexport default shuffle;\r\n","function getRndInteger(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) ) + min;\r\n}\r\n\r\nexport default getRndInteger;","import shuffle from \"./shuffle.js\";\r\nimport getRndInteger from \"./getRndInteger\";\r\n\r\nfunction generatepwd(length, lowercase, uppercase, number, specialcharacter) {\r\n  const lowerCase = \"abcdefghijklmnopqrstuvwxyz\";\r\n  const upperCase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n  const digit = \"0123456789\";\r\n  const specialCharacter = \"`~!@#\\\"'$%^&*()_-=+[]{};:,.<>?/|\";\r\n  let result = \"\";\r\n\r\n  // make all arguments other than length an object value\r\n  const choices = {\r\n    lowercase,\r\n    uppercase,\r\n    number,\r\n    specialcharacter,\r\n  };\r\n\r\n  const asArray = Object.entries(choices);\r\n\r\n  const filtered = asArray.filter(([key, value]) => value);\r\n  // returns filtered list with elements in the form [key, value]; where value is true\r\n\r\n  // Convert the key/value array back to an object:\r\n  //  { key: value, ...}\r\n  // `{ name: 'Luke Skywalker', title: 'Jedi Knight' }`\r\n  const filterChoice = Object.fromEntries(filtered);\r\n  const filterChoiceKeys = Object.keys(filterChoice);\r\n\r\n  // varibles for the loop\r\n  let j = 0;\r\n  let trace = 0;\r\n\r\n  for (let i of filterChoiceKeys) {\r\n    // normally if the length given by the user is used if it will loop by n times, but if it loops\r\n    // by the length/the number of checked boxes, the result will be equal to the total length chosen by the user\r\n    // e.g 10/2, loops 5 times with each respective choice appended 5 times, making a total of 10;\r\n\r\n    let rand = getRndInteger(1, length / filterChoiceKeys.length);\r\n    j += 1;\r\n\r\n    for (\r\n      let k = 0;\r\n      k < (j !== filterChoiceKeys.length ? rand : length - trace);\r\n      k++\r\n    ) {\r\n      if (i === \"lowercase\") {\r\n        result += lowerCase.charAt(getRndInteger(0, lowerCase.length - 1));\r\n      } else if (i === \"uppercase\") {\r\n        result += upperCase.charAt(getRndInteger(0, upperCase.length - 1));\r\n      } else if (i === \"number\") {\r\n        result += digit.charAt(getRndInteger(0, digit.length - 1));\r\n      } else if (i === \"specialcharacter\") {\r\n        result += specialCharacter.charAt(\r\n          getRndInteger(0, specialCharacter.length - 1)\r\n        );\r\n      }\r\n    }\r\n    // trace needs to start counting at the end of the first loop\r\n    trace += rand;\r\n  }\r\n  if (length / filterChoiceKeys.length < 1)\r\n    return shuffle(result).substring(0, length);\r\n\r\n  return shuffle(result);\r\n}\r\nexport default generatepwd;\r\n","import React, { Component } from \"react\";\r\nimport generatepwd from \"./generatepwd.js\";\r\nimport passwordChecker from \"zxcvbn\";\r\nimport {\r\n  FaRegCheckCircle,\r\n  FaRegTimesCircle,\r\n  FaRegClipboard,\r\n} from \"react-icons/fa\";\r\nimport { AiOutlineMinusCircle } from \"react-icons/ai\";\r\n\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\ntoast.configure();\r\nclass Password extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      password: \"Password is generated Here\",\r\n      length: 10,\r\n      lowercase: false,\r\n      uppercase: false,\r\n      number: false,\r\n      specialcharacter: false,\r\n      passwordStrength: \"\",\r\n      colorSig: \"\",\r\n      icon: \"\",\r\n    };\r\n  }\r\n\r\n  updateLength = (e) => {\r\n    this.setState({ length: e.target.value });\r\n  };\r\n\r\n  updateChoices = (e) => {\r\n    this.setState((prevState) => ({\r\n      [e.target.name]: !prevState[e.target.name],\r\n    }));\r\n  };\r\n  generator = () => {\r\n    let { length, lowercase, uppercase, number, specialcharacter } = this.state;\r\n\r\n    this.setState({\r\n      password: generatepwd(\r\n        length,\r\n        lowercase,\r\n        uppercase,\r\n        number,\r\n        specialcharacter\r\n      ),\r\n    });\r\n  };\r\n\r\n  copyToClipboard = (e) => {\r\n    e.preventDefault();\r\n    navigator.clipboard.writeText(this.state.password);\r\n    toast.success(\"Copied to clipboard\", {\r\n      position: \"bottom-center\",\r\n      autoClose: 3000,\r\n      hideProgressBar: true,\r\n      closeOnClick: true,\r\n      pauseOnHover: false,\r\n      draggable: true,\r\n      progress: undefined,\r\n      closeButton: false,\r\n    });\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const i = {\r\n      0: \"Very weak\",\r\n      1: \"Weak\",\r\n      2: \"Okay\",\r\n      3: \"Strong\",\r\n      4: \"Very strong\",\r\n    };\r\n    const iconComponents = {\r\n      0: <FaRegTimesCircle color=\"hsl(0, 100%, 29%)\" size=\"25px\" />,\r\n      1: <FaRegTimesCircle color=\"hsl(0, 100%, 50%)\" size=\"25px\" />,\r\n      2: <AiOutlineMinusCircle color=\"hsl(39, 97%, 42%)\" size=\"25px\" />,\r\n      3: <FaRegCheckCircle color=\"hsl(120, 100%, 31%)\" size=\"25px\" />,\r\n      4: <FaRegCheckCircle color=\"hsl(120, 93%, 16%)\" size=\"25px\" />,\r\n    };\r\n    if (\r\n      prevState.password !== this.state.password &&\r\n      this.state.password.length !== 0\r\n    ) {\r\n      this.setState({\r\n        colorSig: i[passwordChecker(this.state.password).score].replace(\r\n          \" \",\r\n          \"-\"\r\n        ),\r\n        passwordStrength: i[passwordChecker(this.state.password).score],\r\n        icon: iconComponents[passwordChecker(this.state.password).score],\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"pwd-and-copy\">\r\n          <h1\r\n            className={\r\n              this.state.password === \"Password is generated Here\"\r\n                ? \"password-template\"\r\n                : \"generated-password\"\r\n            }\r\n          >\r\n            {this.state.password}\r\n          </h1>\r\n          {this.state.password &&\r\n            this.state.password !== \"Password is generated Here\" && (\r\n              <button className=\"copy-button\" onClick={this.copyToClipboard}>\r\n                <FaRegClipboard size=\"25px\" />\r\n              </button>\r\n            )}\r\n        </div>\r\n        <div className='enter-len'>\r\n        Enter length of password:{\" \"}\r\n        <input\r\n          id=\"length\"\r\n          type=\"number\"\r\n          value={this.state.length}\r\n          onChange={this.updateLength}\r\n        />\r\n        </div>\r\n        <br />\r\n        <span className=\"check-and-label\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"lowercase\"\r\n            name=\"lowercase\"\r\n            value=\"lowercase\"\r\n            onChange={this.updateChoices}\r\n          />\r\n          <label htmlFor=\"lowercase\">Lowercase letters</label>\r\n        </span>\r\n        <span className=\"check-and-label\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"uppercase\"\r\n            name=\"uppercase\"\r\n            value=\"uppercase\"\r\n            onChange={this.updateChoices}\r\n          />\r\n          <label htmlFor=\"uppercase\">Uppercase letters</label>\r\n        </span>\r\n        <span className=\"check-and-label\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"number\"\r\n            name=\"number\"\r\n            value=\"number\"\r\n            onChange={this.updateChoices}\r\n          />\r\n          <label htmlFor=\"number\">Numbers</label>{\" \"}\r\n        </span>\r\n        <span className=\"check-and-label\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"specialcharacter\"\r\n            name=\"specialcharacter\"\r\n            value=\"specialcharacter\"\r\n            onChange={this.updateChoices}\r\n          />\r\n          <label htmlFor=\"specialcharacter\">Special characters</label>\r\n        </span>\r\n        <br />\r\n        <button className=\"button-generator\" onClick={this.generator}>\r\n          Generate\r\n        </button>\r\n        <div className=\"pwd-strength\">\r\n          <h3>\r\n            Password Strength:{\" \"}\r\n            {this.state.password && <span className={this.state.colorSig}>\r\n              {this.state.passwordStrength}\r\n            </span>}\r\n          </h3>{\" \"}\r\n          {this.state.password && <span className=\"icon\">{this.state.icon}</span>}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Password;\r\n","import \"./App.css\";\nimport Password from \"./components/Password\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Password />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}